<?php		defined('BASEPATH') OR exit('No direct script access allowed');		class Cronjob extends CI_Controller {				protected $_ci;				public function __construct() {						parent::__construct();						$this->load->helper(array('form', 'url'));						$this->load->library('form_validation');						ini_set('memory_limit', '128M');						$this->load->model("common_model");						$this->load->model("cron_model");						$this->_ci = & get_instance();						$this->_ci->load->config('twilio', TRUE);						$this->number = $this->_ci->config->item('number', 'twilio');		}				public function cronTextMsg() {						$data = $this->common_model->commonFunction();						$current_time = date("Y-m-d H:i:s");						$contact1 = array();						$allrows = $this->common_model->getRecords(TABLES::$CRON_TEXTMSG, '*');						foreach ($allrows as $al) {																if ($al['is_recurring'] == '0') {										$optinlist = unserialize($al['optin_list']);										$contact1 = $this->getContacts($optinlist);										$contact1[] = $al['additional_number'];										if ($current_time == $al['send_time']) {												foreach ($contact1 as $to_number) {														$response = $this->common_model->twilioSms($this->number, $to_number, $al['text_body']);														//echo $response;						}					}					} elseif ($al['is_recurring'] == '1' && $al['is_ongoing'] == '0') {										// Scenario for daily sending										if ($al['frequency'] == '1' && $al['endon'] >= date("Y-m-d")) {												$current_db_time = date("H:i", strtotime($al['send_time']));												if ($current_db_time == date("H:i")) {														$optinlist = unserialize($al['optin_list']);														$contact1 = $this->getContacts($optinlist);														$contact1[] = $al['additional_number'];														foreach ($contact1 as $to_number) {																echo $to_number;																$response = $this->common_model->twilioSms($this->number, $to_number, $al['text_body']);																//echo $response;							}						}					}										//scenario for weekly sending					elseif ($al['frequency'] == '2' && $al['endon'] >= date("Y-m-d")) {												$current_db_day = date("l", strtotime($al['send_time']));												$current_db_time = date("H:i", strtotime($al['send_time']));												if (($current_db_day == date("l")) && ($current_db_time == date("H:i"))) {														$optinlist = unserialize($al['optin_list']);														$contact1 = $this->getContacts($optinlist);														$contact1[] = $al['additional_number'];														foreach ($contact1 as $to_number) {																echo $to_number;																$response = $this->common_model->twilioSms($this->number, $to_number, $al['text_body']);																//echo $response;							}						}					}										//scenario for monthly sending					elseif ($al['frequency'] == '4' && $al['endon'] >= date("Y-m-d")) {												$current_db_month = date("d", strtotime($al['send_time']));												$current_db_time = date("H:i", strtotime($al['send_time']));												if (($current_db_month == date("d")) && ($current_db_time == date("H:i"))) {														$optinlist = unserialize($al['optin_list']);														$contact1 = $this->getContacts($optinlist);														$contact1[] = $al['additional_number'];														foreach ($contact1 as $to_number) {																echo $to_number;																$response = $this->common_model->twilioSms($this->number, $to_number, $al['text_body']);																//echo $response;							}						}					}																				//scenario for yearly sending					elseif ($al['frequency'] == '6' && $al['endon'] >= date("Y-m-d")) {												$current_db_day = date("d", strtotime($al['send_time']));												$current_db_month = date("m", strtotime($al['send_time']));												$current_db_time = date("H:i", strtotime($al['send_time']));																								if ($current_db_day == date("d") && $current_db_month == date("m") && $current_db_time == date("H:i")) {														$optinlist = unserialize($al['optin_list']);														$contact1 = $this->getContacts($optinlist);														$contact1[] = $al['additional_number'];														foreach ($contact1 as $to_number) {																echo $to_number;																$response = $this->common_model->twilioSms($this->number, $to_number, $al['text_body']);																//echo $response;							}						}					}					} elseif ($al['is_recurring'] == '1' && $al['is_ongoing'] == '1') {										if ($al['frequency'] == '1') {																								$current_db_time = date("H:i", strtotime($al['send_time']));												if ($current_db_time == date("H:i")) {														$optinlist = unserialize($al['optin_list']);														$contact1 = $this->getContacts($optinlist);														$contact1[] = $al['additional_number'];														foreach ($contact1 as $to_number) {																echo $to_number;																$response = $this->common_model->twilioSms($this->number, $to_number, $al['text_body']);																//echo $response;							}						}					}										//scenario for weekly sending					elseif ($al['frequency'] == '2') {												$current_db_day = date("l", strtotime($al['send_time']));												$current_db_time = date("H:i", strtotime($al['send_time']));												if (($current_db_day == date("l")) && ($current_db_time == date("H:i"))) {														$optinlist = unserialize($al['optin_list']);														$contact1 = $this->getContacts($optinlist);														$contact1[] = $al['additional_number'];														foreach ($contact1 as $to_number) {																echo "in weekly" . $to_number;																$response = $this->common_model->twilioSms($this->number, $to_number, $al['text_body']);																//echo $response;							}						}					}										//scenario for monthly sending					elseif ($al['frequency'] == '4') {												$current_db_month = date("d", strtotime($al['send_time']));												$current_db_time = date("H:i", strtotime($al['send_time']));												if (($current_db_month == date("d")) && ($current_db_time == date("H:i"))) {														$optinlist = unserialize($al['optin_list']);														$contact1 = $this->getContacts($optinlist);														$contact1[] = $al['additional_number'];														foreach ($contact1 as $to_number) {																echo $to_number;																$response = $this->common_model->twilioSms($this->number, $to_number, $al['text_body']);																//echo $response;							}						}					}																				//scenario for yearly sending					elseif ($al['frequency'] == '6') {												$current_db_day = date("d", strtotime($al['send_time']));												$current_db_month = date("m", strtotime($al['send_time']));												$current_db_time = date("H:i", strtotime($al['send_time']));																								if ($current_db_day == date("d") && $current_db_month == date("m") && $current_db_time == date("H:i")) {														$optinlist = unserialize($al['optin_list']);														$contact1 = $this->getContacts($optinlist);														$contact1[] = $al['additional_number'];														foreach ($contact1 as $to_number) {																echo $to_number;																$response = $this->common_model->twilioSms($this->number, $to_number, $al['text_body']);																//echo $response;							}						}					}				}			}		}				public function getContacts($optinlist = array()) {						$contact1 = array();						foreach ($optinlist as $olist) {								$contact = $this->common_model->getRecords(TABLES::$CONTACT_MAPPING, "contact_id", array('list_id' => $olist));								$i = 0;																foreach ($contact as $key => $c) {										$mobile = $this->common_model->getRecords(TABLES::$CLIENT_CONTACTS, "phone", array('id' => $c['contact_id']));										foreach ($mobile as $mp) {												$contact1[] = $mp['phone'];					}				}			}						return $contact1;		}				public function cronAutoResponder() {						$auto_responder_data = $this->common_model->getRecords(TABLES::$MST_AUTO_RESPONDER, '*');						foreach ($auto_responder_data as $adata) {								$optin_list_users = $this->cron_model->getOptinUsers($adata['optin_list_id']);								foreach ($optin_list_users as $ou) {										$opted_user_time = $ou['user_opted_in_time'];										$start = date_create($opted_user_time);										$end = date_create(date("Y-m-d H:i:s"));										$diff = date_diff($end, $start);																				$get_msgs = $this->common_model->getRecords(TABLES::$TRANS_AUTO_RESPONDER, '*', array('is_complete' => '0', 'responder_id' => $adata['id']));										foreach ($get_msgs as $gm) {												$time = $gm['time'];												$hour = $gm['hour'];												$frequency = $gm['frequency'];												if ($frequency == 'min') {														if ($diff->i == $time) {																$response = $this->common_model->twilioSms($this->number, $ou['phone'], $gm['message']);																$this->common_model->updateRow(TABLES::$TRANS_AUTO_RESPONDER, array('is_complete' => 1), array('id' => $gm['id']));							}						}																								if ($frequency == 'hour') {														if ($diff->h == $time) {																$response = $this->common_model->twilioSms($this->number, $ou['phone'], $gm['message']);																$this->common_model->updateRow(TABLES::$TRANS_AUTO_RESPONDER, array('is_complete' => 1), array('id' => $gm['id']));							}						}																								if ($frequency == 'day') {														echo $diff->days;														if ($diff->days == $time && date("H:i", strtotime($hour)) == date("H:i")) {																$response = $this->common_model->twilioSms($this->number, $ou['phone'], $gm['message']);																$this->common_model->updateRow(TABLES::$TRANS_AUTO_RESPONDER, array('is_complete' => 1), array('id' => $gm['id']));							}						}																								if ($frequency == 'week') {														echo $timeset = $time * 7;														if ($diff->days == $timeset && date("H:i", strtotime($hour)) == date("H:i")) {																$response = $this->common_model->twilioSms($this->number, $ou['phone'], $gm['message']);																$this->common_model->updateRow(TABLES::$TRANS_AUTO_RESPONDER, array('is_complete' => 1), array('id' => $gm['id']));							}						}																								if ($frequency == 'month') {														echo $tot_month = $diff->format("%m");														if ($tot_month == $time && date("H:i", strtotime($hour)) == date("H:i")) {																$response = $this->common_model->twilioSms($this->number, $ou['phone'], $gm['message']);																$this->common_model->updateRow(TABLES::$TRANS_AUTO_RESPONDER, array('is_complete' => 1), array('id' => $gm['id']));							}						}					}				}			}		}				public function cronAppointment() {						$apps = $this->common_model->getRecords(TABLES::$APPOINTMENTS, '*', array('is_complete' => '0'));						foreach ($apps as $app) {								$datetime1 = strtotime($app['appointment_date']);								$datetime2 = strtotime(date("Y-m-d H:i:s"));								$interval = abs($datetime2 - $datetime1);								$minutes = round($interval / 60);								//echo $app['id'];																if ($minutes == $app['prior_time']) {										$response = $this->common_model->twilioSms($this->number, $app['client_mobile'], $app['text_msg']);										$this->common_model->updateRow(TABLES::$APPOINTMENTS, array('is_complete' => 1), array('id' => $app['id']));				}			}		}				public function dbBackup() {			// Load the DB utility class			$this->load->dbutil(); 						$prefs = array(            'ignore' => array('tbl_countries','tbl_cities','tbl_states'), // List of tables to omit from the backup            'format' => 'zip', // gzip, zip, txt            'filename' => 'novaevcard.sql', // File name - NEEDED ONLY WITH ZIP FILES            'add_drop' => TRUE, // Whether to add DROP TABLE statements to backup file            'add_insert' => TRUE, // Whether to add INSERT data to backup file            'newline' => "\n"                         // Newline character used in backup file			);						$backup = $this->dbutil->backup($prefs);			$time = date("Y_m_d_H_i_s");			$filename = "db_backup/db_".$time.".zip";						// Load the file helper and write the file to your server			$this->load->helper('file');			write_file($filename, $backup);		}						/************ Added by Ranjit on 17 May 2017 to Set cronjob for sending scheduled Email's Start ***************/				public function cronSendEmail() {						$data = $this->common_model->commonFunction();						$current_time = date("Y-m-d H:i:s");						$contact1 = array();						$allrows = $this->common_model->getRecords(TABLES::$CRON_EMAIL, '*');									foreach ($allrows as $al) {				// print_r($al);				if ($al['is_recurring'] == '0') {										$optinlist = unserialize($al['optin_list']);										$contact1 = $this->getEmails($optinlist);										$contact1[] = $al['additional_email_id'];					/*						echo $current_time;						echo "<br/>";						echo $al['send_time'];						echo "<br/>";					*/					// $al['send_time']=$current_time;					/*						$current_db_time = date("H:i", strtotime($al['send_time']));																			echo $current_db_time."==".date("H:i");							echo "<br/>";													echo $current_db_date."==".date("Y-m-d");							echo "<br/>";																		if ($current_db_time == date("H:i")) {					*/					if ($current_time == $al['send_time']) {												$response=$this->send_email($contact1,$al['email_subject'],$al['email_body']);											}					} elseif ($al['is_recurring'] == '1' && $al['is_ongoing'] == '0') {										// Scenario for daily sending										if ($al['frequency'] == '1' && $al['endon'] >= date("Y-m-d")) {												$current_db_time = date("H:i", strtotime($al['send_time']));												/*							echo $current_time;							echo "<br/>";							echo $al['send_time'];							echo "<br/>";						*/												if ($current_db_time == date("H:i")) {														$optinlist = unserialize($al['optin_list']);														$contact1 = $this->getEmails($optinlist);														$contact1[] = $al['additional_email_id'];																					$response=$this->send_email($contact1,$al['email_subject'],$al['email_body']);													}					}										//scenario for weekly sending					elseif ($al['frequency'] == '2' && $al['endon'] >= date("Y-m-d")) {												$current_db_day = date("l", strtotime($al['send_time']));												$current_db_time = date("H:i", strtotime($al['send_time']));																		/*							echo $current_db_day;							echo "<br/>";							echo $current_db_time;							echo "<br/>";							echo date("H:i");							echo "<br/>";						*/												if (($current_db_day == date("l")) && ($current_db_time == date("H:i"))) {														$optinlist = unserialize($al['optin_list']);														$contact1 = $this->getEmails($optinlist);														$contact1[] = $al['additional_email_id'];							echo "df";														$response=$this->send_email($contact1,$al['email_subject'],$al['email_body']);							print_r($response);													}					}										//scenario for monthly sending					elseif ($al['frequency'] == '4' && $al['endon'] >= date("Y-m-d")) {												$current_db_month = date("d", strtotime($al['send_time']));												$current_db_time = date("H:i", strtotime($al['send_time']));																		/*							echo $current_db_month." == ".date("d");							echo "<br/>";							echo $current_db_time." == ".date("H:i");							echo "<br/>";						*/																		if (($current_db_month == date("d")) && ($current_db_time == date("H:i"))) {														$optinlist = unserialize($al['optin_list']);														$contact1 = $this->getEmails($optinlist);														$contact1[] = $al['additional_email_id'];														$response=$this->send_email($contact1,$al['email_subject'],$al['email_body']);													}					}																				//scenario for yearly sending					elseif ($al['frequency'] == '6' && $al['endon'] >= date("Y-m-d")) {												$current_db_day = date("d", strtotime($al['send_time']));												$current_db_month = date("m", strtotime($al['send_time']));												$current_db_time = date("H:i", strtotime($al['send_time']));												/*							echo $current_db_day." == ".date("d");							echo "<br/>";							echo $current_db_month." == ".date("m");							echo "<br/>";							echo $current_db_time." == ".date("H:i");							echo "<br/>";						*/						if ($current_db_day == date("d") && $current_db_month == date("m") && $current_db_time == date("H:i")) {														$optinlist = unserialize($al['optin_list']);														$contact1 = $this->getEmails($optinlist);														$contact1[] = $al['additional_email_id'];																					$response=$this->send_email($contact1,$al['email_subject'],$al['email_body']);													}					}					} elseif ($al['is_recurring'] == '1' && $al['is_ongoing'] == '1') {										if ($al['frequency'] == '1') {																								$current_db_time = date("H:i", strtotime($al['send_time']));												/*							echo $current_db_time." == ".date("H:i");							echo "<br/>";						*/												if ($current_db_time == date("H:i")) {														$optinlist = unserialize($al['optin_list']);														$contact1 = $this->getEmails($optinlist);														$contact1[] = $al['additional_email_id'];																					$response=$this->send_email($contact1,$al['email_subject'],$al['email_body']);													}					}										//scenario for weekly sending					elseif ($al['frequency'] == '2') {												$current_db_day = date("l", strtotime($al['send_time']));												$current_db_time = date("H:i", strtotime($al['send_time']));												/*							echo $current_db_day." == ".date("l");							echo "<br/>";							echo $current_db_time." == ".date("H:i");							echo "<br/>";						*/												if (($current_db_day == date("l")) && ($current_db_time == date("H:i"))) {														$optinlist = unserialize($al['optin_list']);														$contact1 = $this->getEmails($optinlist);														$contact1[] = $al['additional_email_id'];																					$response=$this->send_email($contact1,$al['email_subject'],$al['email_body']);													}					}										//scenario for monthly sending					elseif ($al['frequency'] == '4') {												$current_db_day = date("d", strtotime($al['send_time']));												$current_db_time = date("H:i", strtotime($al['send_time']));																		/*							echo $current_db_day." == ".date("d");							echo "<br/>";							echo $current_db_time." == ".date("H:i");							echo "<br/>";						*/												if (($current_db_day == date("d")) && ($current_db_time == date("H:i"))) {														$optinlist = unserialize($al['optin_list']);														$contact1 = $this->getEmails($optinlist);														$contact1[] = $al['additional_email_id'];																					$response=$this->send_email($contact1,$al['email_subject'],$al['email_body']);													}					}																				//scenario for yearly sending					elseif ($al['frequency'] == '6') {												$current_db_day = date("d", strtotime($al['send_time']));												$current_db_month = date("m", strtotime($al['send_time']));												$current_db_time = date("H:i", strtotime($al['send_time']));																								/*							echo $current_db_day." == ".date("d");							echo "<br/>";							echo $current_db_month." == ".date("m");							echo "<br/>";							echo $current_db_time." == ".date("H:i");							echo "<br/>";						*/						if ($current_db_day == date("d") && $current_db_month == date("m") && $current_db_time == date("H:i")) {														$optinlist = unserialize($al['optin_list']);														$contact1 = $this->getEmails($optinlist);														$contact1[] = $al['additional_email_id'];														$response=$this->send_email($contact1,$al['email_subject'],$al['email_body']);													}					}				}			}		}				public function getEmails($optinlist = array()) {						$contact1 = array();						foreach ($optinlist as $olist) {								$contact = $this->common_model->getRecords(TABLES::$CONTACT_MAPPING, "contact_id", array('list_id' => $olist));								$i = 0;																foreach ($contact as $key => $c) {									$mobile = $this->common_model->getRecords(TABLES::$CLIENT_CONTACTS, "email", array('id' => $c['contact_id']));								foreach ($mobile as $mp) {								$contact1[] = $mp['email'];				}				}				}								return $contact1;				}																public function send_email($contact1 = array(),$email_template_subject,$email_template_content) {								// $contact1 = array();								// print_r($contact1);				$prefix = $send_email_list = '';				foreach ($contact1 as $email_id)				{				$send_email_list .= $prefix . '' . $email_id . '';				$prefix = ',';				}								// return $send_email_list;				// die();								/* Send mail Start */								$config = Array(				'protocol' => 'smtp',				'smtp_host' => 'ssl://smtp.googlemail.com',				'smtp_port' => 465,				'smtp_user' => 'rpdigitel@gmail.com', // change it to yours				'smtp_pass' => 'Rebelute@905', // change it to yours				'mailtype' => 'html',				'charset' => 'iso-8859-1',				'wordwrap' => TRUE				);								$this->load->library('email', $config);				$this->email->set_newline("\r\n");				$this->email->from('rpdigitel@gmail.com'); // change it to yours				$this->email->to($send_email_list); // change it to yours				$this->email->subject($email_template_subject);				$this->email->message($email_template_content);												if ($this->email->send()) {				$data ['status'] = 0;				$data ['msg'] ='Mail sent successfully';				$data ['success_data']=$send_email_list."<br/>".$email_template_subject."<br/>".$email_template_content."<br/>";				} else {				$data ['status'] = 0;				$data ['msg'] = $this->email->print_debugger();				show_error($this->email->print_debugger());								$data ['success_data']=$send_email_list."<br/>".$email_template_subject."<br/>".$email_template_content."<br/>";								}												/* Send mail End */								return $data;				}								/************ Added by Ranjit on 17 May 2017 to Set cronjob for sending scheduled Email's End ***************/												}								