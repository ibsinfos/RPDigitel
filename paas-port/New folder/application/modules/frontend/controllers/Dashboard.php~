<?php

defined('BASEPATH') OR exit('No direct script access allowed');

class Dashboard extends CI_Controller
{

    public function __construct()
    {
        parent::__construct();
        $this->load->helper(array('form', 'url'));
        $this->load->library('form_validation');
        $this->load->model("common_model");
        ini_set('memory_limit', '128M');
    }

    public function index()
    {
        if (!$this->common_model->isLoggedIn()) {
            redirect("login");
        }
        $this->template->set('page', 'dashboard');
        $this->template->set('page_type', 'inner');
        $this->template->set_theme('default_theme');
        $this->template->set_layout('default')
                ->title('vCard | Dashboard')
                ->set_partial('header', 'partials/inner_header')
                ->set_partial('footer', 'partials/inner_footer');
        $this->template->build('dashboard');
    }

    /**
     * code for call signup form
     */
    public function createVcard()
    {
        if (!$this->common_model->isLoggedIn()) {
            redirect("login");
        }
        $this->load->model("Location_model");
        $session_data = $this->session->userdata();
        $result['list'] = $this->Location_model->getCountry();
        $userdata = $this->common_model->getRecords(TABLES::$ADMIN_USER, '*', array('id' => $session_data['user_account']['user_id']));
        $this->template->set('user_data', $userdata);
        $this->template->set('page', 'vcard-steps');
        $this->template->set('country', $result['list']);
        $this->template->set('page_type', 'inner');
        $this->template->set_theme('default_theme');
        $this->template->set_layout('default')
                ->title('vCard | Home')
                ->set_partial('header', 'partials/inner_header')
                ->set_partial('footer', 'partials/inner_footer');
        $this->template->build('vcard_steps');
    }

    /**
     * code for call vcaed edit page
     */
    public function editVcard()
    {
        if (!$this->common_model->isLoggedIn()) {
            redirect("login");
        }
        $this->load->model("Location_model");
        $session_data = $this->session->userdata();
        $result['list'] = $this->Location_model->getCountry();
        $userdata = $this->common_model->getRecords(TABLES::$ADMIN_USER, '*', array('id' => $session_data['user_account']['user_id']));
        $business_strat = $this->common_model->getRecords(TABLES::$BUSINESS_STRAT, '*', array('user_id' => $session_data['user_account']['user_id']));
        $this->template->set('user_data', $userdata);
        $this->template->set('business_strat', $business_strat);
        $this->template->set('page', 'vcard-steps');
        $this->template->set('country', $result['list']);
        $this->template->set('page_type', 'inner');
        $this->template->set_theme('default_theme');
        $this->template->set_layout('default')
                ->title('vCard | Update vCard')
                ->set_partial('header', 'partials/inner_header')
                ->set_partial('footer', 'partials/inner_footer');
        $this->template->build('edit_vcard');
    }

    public function updatevCard()
    {
        $this->load->helper('utility_helper');
        $this->load->model('common_model');
        $this->load->helper(array(
            'form',
            'url'
        ));
        $session_data = $this->session->userdata();
        $errors = array();
        $this->load->library('form_validation');
        $errorMsg = array();
        $err_num = 0;

        $this->form_validation->set_rules('first_name', 'First Name', 'trim|required');
        $this->form_validation->set_rules('last_name', 'Last Name', 'trim|required');
        $this->form_validation->set_rules('mobile', 'Mobile', 'trim|required');
        $this->form_validation->set_rules('company_name', 'Company Name', 'trim|required');
        $this->form_validation->set_rules('job_title', 'Job Title', 'trim|required');
        $this->form_validation->set_rules('company_phone', 'Company Phone', 'trim|required');
        $this->form_validation->set_rules('company_website', 'Company Website', 'trim|required');

        $this->form_validation->set_rules('personal_title', 'Personal Title', 'trim|required');
        $this->form_validation->set_rules('home_phone', 'Home Phone', 'trim|required');

        $this->form_validation->set_rules('gender', 'Gender', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            $map ['status'] = 0;
            $map ['msg'] = validation_errors();
            echo json_encode($map);
        } else {
            $map = array();
            $user = array();
            $user['first_name'] = $this->input->post('first_name');
            $user['last_name'] = $this->input->post('last_name');
            $user['mobile'] = $this->input->post('mobile');
            $user['email'] = $this->input->post('email');

            $user['company_name'] = $this->input->post('company_name');
            $user['job_title'] = $this->input->post('job_title');
            $user['work_phone'] = $this->input->post('company_phone');
            $user['work_website'] = $this->input->post('company_website');
            $user['work_address'] = $this->input->post('work_address');
            $user['work_city'] = $this->input->post('work_city');
            $user['work_state'] = $this->input->post('work_state');
            $user['work_country'] = $this->input->post('work_country');
            $user['work_postal_code'] = $this->input->post('work_postal_code');

            $user['home_address'] = $this->input->post('home_address');
            $user['home_city'] = $this->input->post('home_city');
            $user['home_state'] = $this->input->post('home_state');
            $user['home_country'] = $this->input->post('home_country');
            $user['home_postal_code'] = $this->input->post('home_postal_code');
            $user['home_phone'] = $this->input->post('home_phone');
            $user['personal_title'] = $this->input->post('personal_title');
            $user['nick_name'] = $this->input->post('nick_name');

            $user['gender'] = $this->input->post('gender');
            $user['birthday'] = $this->input->post('birthday');
            $user['anniversary'] = $this->input->post('anniversary');
            $user['notes'] = $this->input->post('notes');

            $user['facebook_link'] = $this->input->post('facebook_link');
            $user['twitter_link'] = $this->input->post('twitter_link');
            $user['linkedin_link'] = $this->input->post('linkedin_link');

            $this->load->model('Login_model');

            if (!empty($_FILES['why_choose_image']['name'])) {
                $config = array();
                $config['upload_path'] = './uploads/why_choose_images/';
                $config['allowed_types'] = 'gif|jpg|png|jpeg';
                $config['max_size'] = 1024;
                $config['max_width'] = 1024;
                $config['max_height'] = 768;
                $config['remove_spaces'] = TRUE;
                $config['encrypt_name'] = TRUE;
                $config['overwrite'] = FALSE;

                $this->load->library('upload', $config);
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('why_choose_image')) {
                    $error = $this->upload->display_errors();
                    $map ['status'] = 0;
                    $map ['msg'] = "Why choose image error - " . $error1;
                    echo json_encode($map);
                    exit;
                } else {
                    $data = array('upload_data' => $this->upload->data());
                }
                $user['why_choose_image'] = base_url() . "uploads/why_choose_images/" . $data['upload_data']['file_name'];
            }
            if (!empty($_FILES['why_choose_video']['name'])) {
                $config1 = array();
                $config1['upload_path'] = './uploads/why_choose_videos/';
                $config1['allowed_types'] = 'mp4|mpeg|avi|3gp';
                $config1['max_size'] = 20971520;
                $config1['remove_spaces'] = TRUE;
                $config1['encrypt_name'] = TRUE;
                $config1['overwrite'] = FALSE;


                $this->load->library('upload', $config1);
                $this->upload->initialize($config1);
                if (!$this->upload->do_upload('why_choose_video')) {
                    $error1 = $this->upload->display_errors();
                    $map1 ['status'] = 0;
                    $map1 ['msg'] = "Why choose video error - " . $error1;
                    echo json_encode($map1);
                    exit;
                } else {
                    $data1 = array('upload_data' => $this->upload->data());
                }
                $user['why_choose_video'] = base_url() . "uploads/why_choose_videos/" . $data1['upload_data']['file_name'];
            }

            if (!empty($_FILES['business_opportunity_video']['name'])) {
                $config3 = array();
                $config3['upload_path'] = './uploads/business_opportunity_video/';
                $config3['allowed_types'] = 'mp4|mpeg|avi|3gp';
                $config3['max_size'] = 20971520;
                $config3['remove_spaces'] = TRUE;
                $config3['encrypt_name'] = TRUE;
                $config3['overwrite'] = FALSE;

                $this->load->library('upload', $config3);
                $this->upload->initialize($config3);
                if (!$this->upload->do_upload('business_opportunity_video')) {
                    $error4 = $this->upload->display_errors();
                    $map ['status'] = 0;
                    $map ['msg'] = "Businss opprtunity video error - " . $error4;
                    echo json_encode($map);
                    exit;
                } else {
                    $data2 = array('upload_data' => $this->upload->data());
                }
                $user['business_opportunity_video'] = base_url() . "uploads/business_opportunity_video/" . $data2['upload_data']['file_name'];
            }

            if (!empty($_FILES['business_strat_video']['name'])) {
                $error = array();
                $config4 = array();
                $config4['upload_path'] = './uploads/business_strategy_videos/'; //give the path to upload the image in folder
                $config4['remove_spaces'] = TRUE;
                $config4['encrypt_name'] = TRUE; // for encrypting the name
                $config4['allowed_types'] = 'mp4|mpeg|avi|3gp';
                $config4['max_size'] = 20971520;
                $config4['overwrite'] = FALSE;
                $files = $_FILES;
                $count = count($_FILES['business_strat_video']['name']);
                for ($i = 0; $i < $count; $i++) {
                    if (!empty($_FILES['business_strat_video']['name'][$i])) {
                        $_FILES['business_strat_video']['name'] = $files['business_strat_video']['name'][$i];
                        $_FILES['business_strat_video']['type'] = $files['business_strat_video']['type'][$i];
                        $_FILES['business_strat_video']['tmp_name'] = $files['business_strat_video']['tmp_name'][$i];
                        $_FILES['business_strat_video']['error'] = $files['business_strat_video']['error'][$i];
                        $_FILES['business_strat_video']['size'] = $files['business_strat_video']['size'][$i];
//                    $this->upload->initialize($config4); //function defination below
                        $this->load->library('upload', $config4);
                        $this->upload->initialize($config4);
                        if ($this->upload->do_upload('business_strat_video')) {
                            $upload_data = $this->upload->data();
                            $name_array[] = $upload_data['file_name'];
                            $fileName = $upload_data['file_name'];
                            $images[] = $fileName;
                        } else {
                            $error[] = $this->upload->display_errors();
                        }
                    }
                }
                if (!empty($images)) {
                    if (sizeof($error) > 0) {
                        $map ['status'] = 0;
                        foreach ($error as $err) {
                            $map ['msg'] = "Business Strategy video error - " . $err;
                        }
                        echo json_encode($map);
                        exit;
                    } else {
                        $fileName = $images;
                    }
                }
            }
            $dbid = $this->common_model->getRecords(TABLES::$BUSINESS_STRAT, 'id', array('user_id' => $session_data['user_account']['user_id']));
            $newar = array();
            $oldarr = array();
            foreach ($dbid as $did) {
                $newar[] = $did['id'];
            }
            for ($k = 0; $k < count($_POST['hiddenid']); $k++) {
                $oldarr[] = $_POST['hiddenid'][$k];
            }
            $arr_diff = array_diff($newar, $oldarr);

            if (count($arr_diff) > 0) {
                $bb = array_values($arr_diff);
                for ($l = 0; $l < count($bb); $l++) {
                    $this->db->where('id', $bb[$l]);
                    $this->db->delete(TABLES::$BUSINESS_STRAT);
                    //echo $this->db->last_query();
                }
            }
            // echo json_encode("noedit count ".count($this->input->post('noedit')));die();
            if (!empty($images)) {
            for ($j = 0; $j < count($this->input->post('noedit')); $j++) {
                if (isset($_POST['noedit'][$j]) && $_POST['noedit'][$j] != '') {
                    $video = base_url() . "uploads/business_strategy_videos/" . $fileName[$j];
                    // $this->common_model->updateRow(TABLES::$BUSINESS_STRAT, array('strat_name' => $_POST['strat_name'][$j], 'video' => $_POST['noedit'][$j], 'description' => $_POST['business_strategy'][$j]), array('video' => $_POST['noedit'][$j]));
                    $this->common_model->insertRow(array('user_id' => $session_data['user_account']['user_id'], 'strat_name' => $_POST['strat_name'][$j], 'video' => $video, 'description' => $_POST['business_strategy'][$j]), TABLES::$BUSINESS_STRAT);
                }
            }
            }
//            if (!empty($images)) {
//                //echo json_encode("images count ".count($images));die();
//                for ($i = 0; $i < count($images); $i++) {
//                    $video = base_url() . "uploads/business_strategy_videos/" . $fileName[$i];
//                    $this->common_model->insertRow(array('user_id' => $session_data['user_account']['user_id'], 'strat_name' => $_POST['strat_name'][$i], 'video' => $video, 'description' => $_POST['business_strategy'][$i]), TABLES::$BUSINESS_STRAT);
//                }
//            }


            $uid = $this->common_model->updateRow(TABLES::$ADMIN_USER, $user, array('id' => $session_data['user_account']['user_id']));
            if ($uid) {
                $map ['status'] = 1;
                $map ['msg'] = "Your data has been updated";
                echo json_encode($map);
            }
        }
    }

    public function saveVcardStep1()
    {
        $this->load->helper('utility_helper');
        $this->load->model('common_model');
        $this->load->helper(array(
            'form',
            'url'
        ));
        $errors = array();
        $this->load->library('form_validation');
        $errorMsg = array();
        $err_num = 0;

        $this->form_validation->set_rules('first_name', 'First Name', 'trim|required');
        $this->form_validation->set_rules('last_name', 'Last Name', 'trim|required');
        $this->form_validation->set_rules('mobile', 'Mobile', 'trim|required');



        if ($this->form_validation->run() == FALSE) {
            $map ['status'] = 0;
            $map ['msg'] = validation_errors();
            echo json_encode($map);
        } else {
            $map = array();
            $user = array();
            $user['first_name'] = $this->input->post('first_name');
            $user['last_name'] = $this->input->post('last_name');
            $user['mobile'] = $this->input->post('mobile');
            $user['email'] = $this->input->post('email');
            $user1['id'] = $this->input->post('id');
            $this->load->model('Login_model');
            $uid = $this->common_model->updateRow(TABLES::$ADMIN_USER, $user, array('id' => $user1['id']));
            if ($uid) {
                $map ['status'] = 1;
                $map ['msg'] = "Your data has been saved";
                echo json_encode($map);
            }
        }
    }

    public function saveVcardStep2()
    {
        $this->load->helper('utility_helper');
        $this->load->model('common_model');
        $this->load->helper(array(
            'form',
            'url'
        ));
        $errors = array();
        $this->load->library('form_validation');
        $errorMsg = array();
        $err_num = 0;

        $this->form_validation->set_rules('company_name', 'Company Name', 'trim|required');
        $this->form_validation->set_rules('job_title', 'Job Title', 'trim|required');
        $this->form_validation->set_rules('company_phone', 'Company Phone', 'trim|required');
        $this->form_validation->set_rules('company_website', 'Company Website', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            $map ['status'] = 0;
            $map ['msg'] = validation_errors();
            echo json_encode($map);
        } else {
            $map = array();
            $user = array();
            $user['company_name'] = $this->input->post('company_name');
            $user['job_title'] = $this->input->post('job_title');
            $user['work_phone'] = $this->input->post('company_phone');
            $user['work_website'] = $this->input->post('company_website');
            $user['work_address'] = $this->input->post('work_address');
            $user['work_city'] = $this->input->post('work_city');
            $user['work_state'] = $this->input->post('work_state');
            $user['work_country'] = $this->input->post('work_country');
            $user['work_postal_code'] = $this->input->post('work_postal_code');
            $user1['id'] = $this->input->post('id');
            $this->load->model('Login_model');
            $uid = $this->common_model->updateRow(TABLES::$ADMIN_USER, $user, array('id' => $user1['id']));
            if ($uid) {
                $map ['status'] = 1;
                $map ['msg'] = "Your data has been saved";
                echo json_encode($map);
            }
        }
    }

    public function saveVcardStep3()
    {
        $this->load->helper('utility_helper');
        $this->load->model('common_model');
        $this->load->helper(array(
            'form',
            'url'
        ));
        $errors = array();
        $this->load->library('form_validation');
        $errorMsg = array();
        $err_num = 0;

        $this->form_validation->set_rules('personal_title', 'Personal Title', 'trim|required');
        $this->form_validation->set_rules('home_phone', 'Home Phone', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            $map ['status'] = 0;
            $map ['msg'] = validation_errors();
            echo json_encode($map);
        } else {
            $map = array();
            $user = array();
            $user['home_address'] = $this->input->post('home_address');
            $user['home_city'] = $this->input->post('home_city');
            $user['home_state'] = $this->input->post('home_state');
            $user['home_country'] = $this->input->post('home_country');
            $user['home_postal_code'] = $this->input->post('home_postal_code');
            $user['home_phone'] = $this->input->post('home_phone');
            $user['personal_title'] = $this->input->post('personal_title');
            $user['nick_name'] = $this->input->post('nick_name');
            $user1['id'] = $this->input->post('id');
            $this->load->model('Login_model');
            $uid = $this->common_model->updateRow(TABLES::$ADMIN_USER, $user, array('id' => $user1['id']));
            if ($uid) {
                $map ['status'] = 1;
                $map ['msg'] = "Your data has been saved";
                echo json_encode($map);
            }
        }
    }

    public function saveVcardStep4()
    {
        $this->load->helper('utility_helper');
        $this->load->model('common_model');
        $this->load->helper(array(
            'form',
            'url'
        ));
        $errors = array();
        $this->load->library('form_validation');
        $errorMsg = array();
        $err_num = 0;

        $this->form_validation->set_rules('gender', 'Gender', 'trim|required');

        if ($this->form_validation->run() == FALSE) {
            $map ['status'] = 0;
            $map ['msg'] = validation_errors();
            echo json_encode($map);
        } else {
            $map = array();
            $user = array();
            $user['gender'] = $this->input->post('gender');
            $user['birthday'] = $this->input->post('birthday');
            $user['anniversary'] = $this->input->post('anniversary');
            $user['notes'] = $this->input->post('notes');
            $user1['id'] = $this->input->post('id');
            $this->load->model('Login_model');
            $uid = $this->common_model->updateRow(TABLES::$ADMIN_USER, $user, array('id' => $user1['id']));
            if ($uid) {
                $map ['status'] = 1;
                $map ['msg'] = "Your data has been saved";
                echo json_encode($map);
            }
        }
    }

    public function saveVcardStep5()
    {
        $this->load->helper('utility_helper');
        $this->load->model('common_model');
        $this->load->helper(array(
            'form',
            'url'
        ));
        $map = array();
        $user = array();
        $user1['id'] = $this->input->post('id');
        if (isset($_FILES['why_choose_image']['name'])) {
            $config = array();
            $config['upload_path'] = './uploads/why_choose_images/';
            $config['allowed_types'] = 'gif|jpg|png|jpeg';
            $config['max_size'] = 1024;
            $config['max_width'] = 1024;
            $config['max_height'] = 768;
            $config['remove_spaces'] = TRUE;
            $config['encrypt_name'] = TRUE;
            $config['overwrite'] = FALSE;

            $this->load->library('upload', $config);
            $this->upload->initialize($config);
            if (!$this->upload->do_upload('why_choose_image')) {
                $error = $this->upload->display_errors();
                $map ['status'] = 0;
                $map ['msg'] = "Why choose image error - " . $error;
                echo json_encode($map);
                exit;
            } else {
                $data = array('upload_data' => $this->upload->data());
            }
            $user['why_choose_image'] = base_url() . "uploads/why_choose_images/" . $data['upload_data']['file_name'];
        }
        if (isset($_FILES['why_choose_video']['name'])) {
            $config1 = array();
            $config1['upload_path'] = './uploads/why_choose_videos/';
            $config1['allowed_types'] = 'mp4|mpeg|avi|3gp';
            $config1['max_size'] = 20971520;
            $config1['remove_spaces'] = TRUE;
            $config1['encrypt_name'] = TRUE;
            $config1['overwrite'] = FALSE;


            $this->load->library('upload', $config1);
            $this->upload->initialize($config1);
            if (!$this->upload->do_upload('why_choose_video')) {
                $error1 = $this->upload->display_errors();
                $map1 ['status'] = 0;
                $map1 ['msg'] = "Why choose video error - " . $error1;
                echo json_encode($map1);
                exit;
            } else {
                $data = array('upload_data' => $this->upload->data());
            }
            $user['why_choose_video'] = base_url() . "uploads/why_choose_videos/" . $data['upload_data']['file_name'];
        }
        $user['why_choose_desc'] = $this->input->post('why_choose_desc');

        $uid = $this->common_model->updateRow(TABLES::$ADMIN_USER, $user, array('id' => $user1['id']));
        if ($uid) {
            $map ['status'] = 1;
            $map ['msg'] = "Your data has been saved";
            echo json_encode($map);
            exit;
        }
    }

    public function saveVcardStep6()
    {
        $this->load->helper('utility_helper');
        $this->load->model('common_model');
        $this->load->helper(array(
            'form',
            'url'
        ));
        $map = array();
        $user = array();
        $user1['id'] = $this->input->post('id');
        if (isset($_FILES['business_opportunity_video']['name'])) {
            $config3 = array();
            $config3['upload_path'] = './uploads/business_opportunity_video/';
            $config3['allowed_types'] = 'mp4|mpeg|avi|3gp';
            $config3['max_size'] = 20971520;
            $config3['remove_spaces'] = TRUE;
            $config3['encrypt_name'] = TRUE;
            $config3['overwrite'] = FALSE;

            $this->load->library('upload', $config3);
            $this->upload->initialize($config3);
            if (!$this->upload->do_upload('business_opportunity_video')) {
                $error4 = $this->upload->display_errors();
                $map ['status'] = 0;
                $map ['msg'] = "Businss opprtunity video error - " . $error4;
                echo json_encode($map);
                exit;
            } else {
                $data = array('upload_data' => $this->upload->data());
            }
            $user['business_opportunity_video'] = base_url() . "uploads/business_opportunity_video/" . $data['upload_data']['file_name'];
        }
        $updatedata = $this->common_model->updateRow(TABLES::$ADMIN_USER, $user, array('id' => $user1['id']));

        if (isset($_POST['business_strategy'])) {
            if (!empty($_FILES['business_strat_video']['name'])) {
                $error = array();
                $config = array();
                $config['upload_path'] = './uploads/business_strategy_videos/'; //give the path to upload the image in folder
                $config['remove_spaces'] = TRUE;
                $config['encrypt_name'] = TRUE; // for encrypting the name
                $config['allowed_types'] = 'mp4|mpeg|avi|3gp';
                $config['max_size'] = 20971520;
                $config['overwrite'] = FALSE;
                $files = $_FILES;
                $count = count($_FILES['business_strat_video']['name']);
                for ($i = 0; $i < $count; $i++) {
                    $_FILES['business_strat_video']['name'] = $files['business_strat_video']['name'][$i];
                    $_FILES['business_strat_video']['type'] = $files['business_strat_video']['type'][$i];
                    $_FILES['business_strat_video']['tmp_name'] = $files['business_strat_video']['tmp_name'][$i];
                    $_FILES['business_strat_video']['error'] = $files['business_strat_video']['error'][$i];
                    $_FILES['business_strat_video']['size'] = $files['business_strat_video']['size'][$i];
                    $this->upload->initialize($config); //function defination below
                    if ($this->upload->do_upload('business_strat_video')) {
                        $upload_data = $this->upload->data();
                        $name_array[] = $upload_data['file_name'];
                        $fileName = $upload_data['file_name'];
                        $images[] = $fileName;
                    } else {
                        $error[] = $this->upload->display_errors();
                    }
                }
                if (sizeof($error) > 0) {
                    $map ['status'] = 0;
                    foreach ($error as $err) {
                        $map ['msg'] = "Business Strategy video error - " . $err;
                    }
                    echo json_encode($map);
                    exit;
                } else {
                    $fileName = $images;
                }
            }
        }
        for ($i = 0; $i < count($_POST['business_strategy']); $i++) {
            $video = base_url() . "uploads/business_strategy_videos/" . $fileName[$i];
            $this->common_model->insertRow(array('user_id' => $user1['id'], 'strat_name' => $_POST['strat_name'][$i], 'video' => $video, 'description' => $_POST['business_strategy'][$i]), TABLES::$BUSINESS_STRAT);
        }
        $card_data = array();
        $map ['status'] = 1;
        $map ['msg'] = "Your vcard has been generated";
        echo json_encode($map);
    }

    public function saveVcardStep7()
    {
        $this->load->helper('utility_helper');
        $this->load->model('common_model');
        $this->load->helper(array(
            'form',
            'url'
        ));
        $errors = array();
        $this->load->library('form_validation');
        $errorMsg = array();
        $err_num = 0;

        $map = array();
        $user = array();
        $user['facebook_link'] = $this->input->post('facebook_link');
        $user['twitter_link'] = $this->input->post('twitter_link');
        $user['linkedin_link'] = $this->input->post('linkedin_link');
        $user['vcard_complete_status'] = 1;
        $user1['id'] = $this->input->post('id');
        $this->load->model('Login_model');
        $uid = $this->common_model->updateRow(TABLES::$ADMIN_USER, $user, array('id' => $user1['id']));
        if ($uid) {
            $map ['status'] = 1;
            $map ['msg'] = "Your data has been saved";
            //$this->generate_card($user1['id']);
            echo json_encode($map);
        }
    }

    public function generate_card($id)
    {
        error_reporting(0);

        $data = $this->common_model->generateVcard($id);
        //echo $data[0]['first_name'];
        $card_data['first_name'] = $data[0]['first_name'];
        $card_data['last_name'] = $data[0]['last_name'];
        $card_data['gender'] = $data[0]['gender'];
        $card_data['additional_name'] = $data[0]['middle_name']; //Middle name
        $card_data['name_prefix'] = $data[0]['personal_title'];  //Mr. Mrs. Dr.
        $card_data['nickname'] = $data[0]['nickname'];

        /*
          Contact's company, department, title, profession
         */
        $card_data['company'] = $data[0]['company_name'];
        //$card_data['department'] = "";
        $card_data['title'] = $data[0]['job_title'];
//        $card_data['role'] = $data[0]['role'];

        /*
          Contact's work address
         */
        //$card_data['work_po_box'] = "";
        //$card_data['work_extended_address'] = "";
        $card_data['work_address'] = $data[0]['work_address'];
        $card_data['work_city'] = $data[0]['work_city'];
        $card_data['work_state'] = $data[0]['work_state'];
        $card_data['work_postal_code'] = $data[0]['work_postal_code'];
        $card_data['work_country'] = $data[0]['work_country'];
        $card_data['gender'] = $data[0]['gender'];

        /*
          Contact's home address
         */
        //$card_data['home_po_box'] = "";
        //$card_data['home_extended_address'] = "";
        $card_data['home_address'] = $data[0]['home_address'];
        $card_data['home_city'] = $data[0]['home_city'];
        $card_data['home_state'] = $data[0]['home_state'];
        $card_data['home_postal_code'] = $data[0]['home_postal_code'];
        $card_data['home_country'] = $data[0]['home_country'];

        /*
          Contact's telephone numbers.
         */
        $card_data['office_tel'] = $data[0]['office_tel'];
        //$card_data['home_tel'] = "";
        $card_data['fax_tel'] = $data[0]['fax_tel'];
        $card_data['cell_tel'] = $data[0]['mobile'];
        //$card_data['pager_tel'] = "";

        /*
          Contact's email addresses
         */
        $card_data['email1'] = $data[0]['email'];
        $card_data['email2'] = $data[0]['email'];

        $card_data['url'] = $data[0]['work_website'];

        /*
          Some other contact data.
         */
        //$card_data['photo'] = "";  //Enter a URL.
        $card_data['birthday'] = $data[0]['birthday'];
        $card_data['note'] = $data[0]['notes'];
        $this->load->library('vcard');
        $this->vcard->load($card_data);
        $this->vcard->generate_download($data[0]['first_name'] . ".vcf");
    }

}
